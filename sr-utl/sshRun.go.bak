package utl

import (
    "fmt"
    "os"
    "path"
    "golang.org/x/crypto/ssh"
    "github.com/pkg/sftp"
    "io/ioutil"
)




func NewConfig(keyFile string, user string)(config *ssh.ClientConfig, err error) {

    var errmess string

    key, err := ioutil.ReadFile(keyFile)
    if err != nil {
        errmess = fmt.Sprint("unable to read private key: %v", err)
        Log("ERROR", errmess)
        return nil, err
    }

    signer, err := ssh.ParsePrivateKey(key)
    if err != nil {
        errmess = fmt.Sprint("unable to parse private key: %v", err)
        Log("ERROR", errmess)
        return nil, err
    }

    config = &ssh.ClientConfig{
        User: user,
        Auth: []ssh.AuthMethod{
            ssh.PublicKeys(signer),
        },
        HostKeyCallback: ssh.InsecureIgnoreHostKey(),
    }

    return config, nil

}

func SshRun(config *ssh.ClientConfig, host string, port int, command string) (outPut []byte, err error) {

    var errmess string
    client, err := ssh.Dial("tcp", fmt.Sprintf("%s:%d", host, port), config)
    if err != nil {
        errmess = fmt.Sprint("unable to connect: %s error %v", host, err)
        Log("ERROR", errmess)
        return nil, err
    }
    defer client.Close()

    session, err := client.NewSession()
    if err != nil{
        errmess = fmt.Sprint("ssh new session error %v", err)
        Log("ERROR", errmess)
        return nil, err
    }
    defer session.Close()

    outPut, err = session.CombinedOutput(command)
    if err != nil{
        errmess = fmt.Sprintf("run command [%s] on host %s error %v", command, host, err)
        Log("WARN", errmess)
	return nil, err
    }
    return outPut, nil
}


func sftpConnect(config *ssh.ClientConfig, host string, port int) (sfpClient *sftp.Client, err error) {

    var infoMess string
    addr := fmt.Sprintf("%s:%d", host, port)

    sshClient, err := ssh.Dial("tcp", addr, config)
    if err != nil {
        infoMess = fmt.Sprintf("Error in dail %s, %s", addr, config)
	Log("ERROR", infoMess)
	return nil, err
    }

    sftpClient, err := sftp.NewClient(sshClient)
    if err != nil {
        infoMess = fmt.Sprintf("Error in get sftp client")
	Log("ERROR", infoMess)
	return nil, err
    }

    return sftpClient, nil

}

func uploadFile(sftpClient *sftp.Client, localFilePath string, remotePath string) (err error) {

    var infoMess string

    srcFile, err := os.Open(localFilePath)
    if err != nil {
        infoMess = fmt.Sprintf("Error in open file %s", localFilePath)
	Log("ERROR", infoMess)
	return err
    }
    defer srcFile.Close()

    var remoteFileName = path.Base(localFilePath)
    dstFile, err := sftpClient.Create(path.Join(remotePath, remoteFileName))
    if err != nil {
	infoMess = fmt.Sprintf("sftpClient.Create error : %s, error = %v", path.Join(remotePath, remoteFileName), err)
        Log("ERROR", infoMess)
	return err
    }
    defer dstFile.Close()

    ff, err := ioutil.ReadAll(srcFile)
    if err != nil {
	infoMess = fmt.Sprintf("ReadAll error : %s", localFilePath)
        Log("ERROR", infoMess)
	return err
    }

    dstFile.Write(ff)
    infoMess = localFilePath + " copy file to remote server finished!"
    Log("DEBUG", infoMess)
    // Chmod remoteFile
    fileStat, err := os.Stat(localFilePath)
    if err != nil {
        infoMess = fmt.Sprintf("Error in get file stat when upload file: [sourceFile = %s  targetFile = %s]", localFilePath, path.Join(remotePath, remoteFileName))
	Log("ERROR", infoMess)
	return err
    }

    err = sftpClient.Chmod(path.Join(remotePath, remoteFileName), fileStat.Mode())
    if err != nil {
        infoMess = fmt.Sprintf("Error in chmod file stat when upload file: [sourceFile = %s  targetFile = %s]", localFilePath, path.Join(remotePath, remoteFileName))
	Log("ERROR", infoMess)
	return err
    }
    infoMess = fmt.Sprintf("chmod file [%s] to %s", path.Join(remotePath, remoteFileName), fileStat.Mode())
    Log("DEBUG", infoMess)
    //Log("INFO", infoMess)
    return err
}


func uploadDirectory(sftpClient *sftp.Client, localPath string, remotePath string) (err error) {

    var infoMess string

    localFiles, err := ioutil.ReadDir(localPath)
    if err != nil {
        infoMess = "Read dir list fail."
	Log("ERROR", infoMess)
	return err
    }

    for _, backupDir := range localFiles {

	localFilePath := path.Join(localPath, backupDir.Name())
        remoteFilePath := path.Join(remotePath, backupDir.Name())

	if backupDir.IsDir() {
            sftpClient.Mkdir(remoteFilePath)
            err = uploadDirectory(sftpClient, localFilePath, remoteFilePath)
	    if err != nil {
	        infoMess = fmt.Sprintf("Error in upload dir %s\t%s\t%s", sftpClient, localFilePath, remoteFilePath)
		Log("ERROR", infoMess)
		return err
	    }
        } else {
            err = uploadFile(sftpClient, path.Join(localPath, backupDir.Name()), remotePath)
	    if err != nil {
	        infoMess = fmt.Sprintf("Error in upload file %s\t%s\t%s", sftpClient, path.Join(localPath, backupDir.Name()), remotePath)
		Log("ERROR", infoMess)
		return err
	    }
        }

    }

    //infoMess = localPath + " copy directory to remote server finished!"
    //Log("INFO", infoMess)
    return err
}


func UpLoadFile(user string, keyFile string, host string, port int, sourceFile string, targetDir string) {

    // sftpConnect(config *ssh.ClientConfig, host string, port int) (sfpClient *sftp.Client, err error)
    // NewConfig(keyFile string, user string)(config *ssh.ClientConfig, err error)
    // uploadFile(sftpClient *sftp.Client, localFilePath string, remotePath string)
    var infoMess string
    sshConfig, err := NewConfig(keyFile, user)
    if err != nil {
        infoMess = fmt.Sprintf("Error in upload file, fail to get ssh config [keyfile = %s, user = %s]", keyFile, user)
	Log("ERROR", infoMess)
    }

    sftpClient, err := sftpConnect(sshConfig, host, port)
    if err != nil {
        infoMess = fmt.Sprintf("Error in upload file, fail to get sftp client [keyfile = %s, user = %s, host = %s, port = %d]", keyFile, user, host, port)
        Log("ERROR", infoMess)
    }

    uploadFile(sftpClient, sourceFile, targetDir)

}

func UploadDir(user string, keyFile string, host string, port int, sourceDir string, targetDir string) {

    var infoMess string
    sshConfig, err := NewConfig(keyFile, user)
    if err != nil {
        infoMess = fmt.Sprintf(`Error in upload dir[get ssh config]: user = %s
	                                                             keyFile = %s
								     host = %s
								     port = %d
								     sourceDir = %s
								     targetDir = %s`,
	                        user, keyFile, host, port, sourceDir, targetDir)
        Log("ERROR", infoMess)
	panic(err)
    }

    // check the folder exist
    cmd := fmt.Sprintf("ls %s", targetDir)
    _, err = SshRun(sshConfig, host, port, cmd)
    if err != nil {
	infoMess = fmt.Sprintf("The target dir [%s] doesn't exist on [%s:%d], create a new one", targetDir, host, port)
	Log("WARN", infoMess)
	cmd = fmt.Sprintf("mkdir -p %s", targetDir)
        _, err := SshRun(sshConfig, host, port, cmd)
        if err != nil {
            infoMess = fmt.Sprintf("Error in create folder [%s] on [%s:%d]", targetDir, host, port)
	    Log("ERROR", infoMess)
            panic(err)
        }
        infoMess = fmt.Sprintf("Create folder [%s] on [%s:%d]", targetDir, host, port)
        Log("WARN", infoMess)
    }

    sftpClient, err := sftpConnect(sshConfig, host, port)
    if err != nil {
        infoMess = fmt.Sprintf(`Error in upload dir[sftp client]: user = %s
                                                                  keyFile = %s
                                                                  host = %s
                                                                  port = %d
                                                                  sourceDir = %s
                                                                  targetDir = %s`,
                                user, keyFile, host, port, sourceDir, targetDir)
        Log("ERROR", infoMess)
	panic(err)
    }

    err = uploadDirectory(sftpClient, sourceDir, targetDir)
    if err != nil {
        infoMess = fmt.Sprintf(`Error in upload dir[upload dir]: user = %s
                                                                  keyFile = %s
                                                                  host = %s
                                                                  port = %d
                                                                  sourceDir = %s
                                                                  targetDir = %s`,
                                user, keyFile, host, port, sourceDir, targetDir)
        Log("ERROR", infoMess)
	panic(err)
    }

}



func TestUploadDir() {

    sshConfig, err := NewConfig("/root/.ssh/id_rsa", "root")
    if err != nil { panic(err) }

    // check targetDir exist
    output, err := SshRun(sshConfig, "192.168.230.41", 22, "ls /opt/starrocks/fe/jdk")
    fmt.Printf("The result of [ls /opt/starrocks/fe/jdk] on 192.168.230.41:22 ---- output = %s, error = %v\n", output, err)

    if err != nil {
	fmt.Println("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
        fmt.Println("The target dir [/opt/starrocks/fe/jdk] doesn't exist on [192.168.230.41].")
        _, err := SshRun(sshConfig, "192.168.230.41", 22, "mkdir -p /opt/starrocks/fe/jdk")

	if err != nil {
	    fmt.Println("Error in create folder [/opt/starrocks/fe/jdk] on [192.168.230.41]")
	    panic(err)
	}

    }
/*
    sftpClient, err := sftpConnect(sshConfig, "192.168.230.41", 22)
    if err != nil { panic(err) }
    uploadDirectory(sftpClient, "/tmp/aaaDir", "/opt/soft/tmp")
*/
}


